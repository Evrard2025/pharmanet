#!/usr/bin/env node

/**
 * Script de diagnostic de la structure de la base de donn√©es
 * Pour identifier les probl√®mes de colonnes manquantes
 */

// D√©finir l'environnement de production
process.env.NODE_ENV = 'production';

// Charger les variables d'environnement de production
require('dotenv').config({ path: '.env-production' });

const { Sequelize, DataTypes } = require('sequelize');

// Configuration pour la production avec PostgreSQL (Aiven)
const dbName = process.env.DB_NAME || 'defaultdb',
  dbUser = process.env.DB_USER || 'avnadmin',
  dbPassword = process.env.DB_PASSWORD || 'YOUR_AIVEN_PASSWORD_HERE',
  dbHost = process.env.DB_HOST || 'YOUR_AIVEN_HOST_HERE',
  dbPort = process.env.DB_PORT || 28221;

// Configuration SSL pour Aiven
const sslConfig = {
  require: true,
  rejectUnauthorized: false,
  checkServerIdentity: false
};

const sequelize = new Sequelize(dbName, dbUser, dbPassword, {
  host: dbHost,
  port: dbPort,
  dialect: 'postgres',
  logging: console.log, // Activer les logs SQL pour diagnostic
  dialectOptions: {
    ssl: sslConfig
  },
  define: {
    timestamps: true,
    underscored: true
  }
});

async function checkDatabaseStructure() {
  try {
    console.log('üîç Diagnostic de la structure de la base de donn√©es...');
    console.log('==================================================');
    
    // Connexion
    await sequelize.authenticate();
    console.log('‚úÖ Connexion √©tablie');
    
    // Lister toutes les tables
    const tables = await sequelize.getQueryInterface().showAllTables();
    console.log('\nüìã Tables existantes:', tables);
    
    // V√©rifier la structure de chaque table
    for (const tableName of tables) {
      console.log(`\nüîç Structure de la table: ${tableName}`);
      console.log('‚îÄ'.repeat(50));
      
      try {
        const tableInfo = await sequelize.getQueryInterface().describeTable(tableName);
        console.log('Colonnes:');
        Object.keys(tableInfo).forEach(columnName => {
          const column = tableInfo[columnName];
          console.log(`  - ${columnName}: ${column.type} ${column.allowNull ? '(nullable)' : '(NOT NULL)'}`);
        });
      } catch (error) {
        console.error(`‚ùå Erreur lors de la description de ${tableName}:`, error.message);
      }
    }
    
    // V√©rifier sp√©cifiquement les tables probl√©matiques
    console.log('\nüîç V√©rification sp√©cifique des tables avec patientId...');
    console.log('‚îÄ'.repeat(60));
    
    const problematicTables = ['consultations', 'prescriptions', 'surveillance_biologique'];
    
    for (const tableName of problematicTables) {
      if (tables.includes(tableName)) {
        console.log(`\nüìä Table: ${tableName}`);
        try {
          const tableInfo = await sequelize.getQueryInterface().describeTable(tableName);
          const hasPatientId = tableInfo.patientId || tableInfo.patient_id;
          console.log(`  - patientId pr√©sent: ${!!hasPatientId}`);
          if (hasPatientId) {
            console.log(`  - Type patientId: ${hasPatientId.type}`);
            console.log(`  - Nullable: ${hasPatientId.allowNull}`);
          } else {
            console.log('  - Colonnes disponibles:', Object.keys(tableInfo));
          }
        } catch (error) {
          console.error(`  ‚ùå Erreur: ${error.message}`);
        }
      } else {
        console.log(`  ‚ö†Ô∏è  Table ${tableName} n'existe pas`);
      }
    }
    
    // V√©rifier les contraintes de cl√©s √©trang√®res
    console.log('\nüîç V√©rification des contraintes de cl√©s √©trang√®res...');
    console.log('‚îÄ'.repeat(60));
    
    try {
      const foreignKeys = await sequelize.getQueryInterface().showConstraints('consultations');
      console.log('Contraintes sur consultations:', foreignKeys);
    } catch (error) {
      console.log('Aucune contrainte trouv√©e ou erreur:', error.message);
    }
    
    await sequelize.close();
    console.log('\n‚úÖ Diagnostic termin√©');
    
  } catch (error) {
    console.error('‚ùå Erreur lors du diagnostic:', error.message);
    console.error('Stack:', error.stack);
    process.exit(1);
  }
}

checkDatabaseStructure();
